using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using SSHConfigurator.Domain;
using SSHConfigurator.Models;
using SSHConfigurator.Services;
using SSHConfigurator.ViewModels;
using ErrorViewModel = SSHConfigurator.ViewModels.ErrorViewModel;

namespace SSHConfigurator.Controllers
{
    /// <summary>
    /// This controller provides some endpoints for the basic operations the user can do.
    /// Upload / Delete a public key.
    /// </summary>
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly UserManager<THUMember> userManager;
        private readonly SignInManager<THUMember> signInManager;
        private readonly IKeyStorageService keyStorageService;
        private readonly IWebHostEnvironment iHostingEnvironment;
        private readonly IRecaptchaService _recaptchaService;

        public HomeController(ILogger<HomeController> logger, UserManager<THUMember> userManager, SignInManager<THUMember> signInManager,
                              IKeyStorageService keyStorageService, IWebHostEnvironment hostingEnvironment, IRecaptchaService recaptchaService)
        {
            _logger = logger;
            this.userManager = userManager;
            this.signInManager = signInManager;
            this.keyStorageService = keyStorageService;
            iHostingEnvironment = hostingEnvironment;
            this._recaptchaService = recaptchaService;
            
        }


        /// <summary>
        /// This endpoint returns the home page.
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> Index()
        {
            var isExistent = await keyStorageService.HasKeyAsync(User.Identity.Name);
            var userData = new HomeViewModel
            {
                UserName = User.Identity.Name,
                HasKey =  isExistent
            };
            return View(userData);
        }
            
        /// <summary>
        /// This endpoint deletes the users public key from .ssh folder if exists.
        /// </summary>
        /// <param name="deleteViewModel">A token generated by Google Recaptcha.</param>
        [HttpPost]

        public async Task<IActionResult> DeleteKey(HomeViewModel deleteViewModel)
        {
            // Google Recaptcha Verification
            var googleRecaptcha = await _recaptchaService.ReceiveVerificationAsync(deleteViewModel.Token);

            // If verification failed, sign out user.
            if (!googleRecaptcha.Success)
            {
                await signInManager.SignOutAsync();
                return RedirectToAction("login", "account");
            }

            await keyStorageService.DeletePublicKeyAsync(User.Identity.Name);
            return RedirectToAction("Index");
        }

        /// <summary>
        /// This endpoint returns the appropriate  view for uploading the public key
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public IActionResult UploadKey()
        {
            return View();
        }


        /// <summary>
        /// This endpoint processes the uploaded form with the public key.
        /// </summary>
        /// <param name="uploadKeyViewModel">Contains the uploaded key and the token generated by Google Recaptcha</param>
        [HttpPost]
        public async Task<IActionResult> UploadKey(UploadKeyViewModel uploadKeyViewModel)
        {
            // Google Recaptcha Verification
            var googleRecaptcha = await _recaptchaService.ReceiveVerificationAsync(uploadKeyViewModel.Token);

            // If verification failed, sign out user.
            if (!googleRecaptcha.Success)
            {
                await signInManager.SignOutAsync();
                return RedirectToAction("login", "account");
            }
            if (ModelState.IsValid)
            {
                // temporarily store the key in the www/temp-keys folder
                var key = await StoreKeyAtTempLocationAsync(uploadKeyViewModel.KeyFile, User.Identity.Name);

                // call a script to delete the existing key if exists, and store the new key. 
                var result = await keyStorageService.StorePublicKeyAsync(key.Keyname , User.Identity.Name);

                if (!result.IsSuccessful)
                {
                    // log the error
                    //_logger.LogError(result.ErrorMessage);
                    ModelState.AddModelError(string.Empty, "Something went wrong...");
                    return View(uploadKeyViewModel);
                }
                // after file copied to the users .ssh folder in authorized_keys, delete key from temp folder
                if (System.IO.File.Exists(key.Keypath))
                    System.IO.File.Delete(key.Keypath);

                return RedirectToAction("Index");
            }
            return View();            
        }


        /// <summary>
        /// This method temporarily stores the uploaded public key in the www folder. 
        /// </summary>
        /// <param name="key">The public key</param>
        /// <param name="username">The username of the current user.</param>
        private async Task<KeyData> StoreKeyAtTempLocationAsync(IFormFile key, string username)
        {
            string uploadsFolder = Path.Combine(iHostingEnvironment.WebRootPath, "temp-keys");
            string uniqueFileName = Guid.NewGuid().ToString() + "_" + username;
            string filePath = Path.Combine(uploadsFolder, uniqueFileName);
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await key.CopyToAsync(stream);
            }

            return new KeyData
            {
                Keyname = uniqueFileName,
                Keypath = filePath
            };
        }

    }
}
